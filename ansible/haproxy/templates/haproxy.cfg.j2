global
  log stdout format raw local0 info
  log-send-hostname
  chroot /var/lib/haproxy
  stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
  stats timeout 30s
  user haproxy
  group haproxy
  daemon
  
  ca-base /etc/ssl/certs
  crt-base /etc/ssl/private
  
  ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
  ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

  ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
  ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

defaults
  log     global
  mode    tcp           # Mudado para TCP por padr√£o
  option  tcplog
  option  dontlognull
  timeout connect 5000
  timeout client  50000
  timeout server  50000
  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http

frontend stats
  bind *:{{ haproxy_stats_porta }}
  mode http
  stats enable
  stats uri /stats
  stats refresh 10s
  stats show-legends
  stats show-node
  stats auth {{ haproxy_stats_usuario }}:{{ haproxy_stats_senha }}
  stats admin if TRUE

  acl redes_permitidas src {{ haproxy_stats_redes_liberadas }}
  http-request deny unless redes_permitidas

frontend kube_apiserver
  bind :{{ porta_haproxy }}
  default_backend kube_apiserver

backend kube_apiserver
  option httpchk GET /healthz
  http-check connect ssl alpn h2,http/1.1 ssl
  balance roundrobin
{% for apiserver_ip in apiserver_ips %}
  server kube-apiserver-{{ loop.index }} {{ apiserver_ip }}:{{ apiserver_porta }} check inter 3s fall 1 rise 1 verify required ca-file /etc/ssl/certs/k8s-in-a-jar.crt
{% endfor %}
