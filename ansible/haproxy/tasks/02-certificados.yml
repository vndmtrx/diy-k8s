# ansible/haproxy/tasks/03-certificados.yml
---
# Verificações preliminares
- name: Verificar existência dos certificados do Kubernetes
  ansible.builtin.stat:
    path: "{{ item }}"
  register: k8s_cert_files
  loop:
    - "/vagrant/arquivos/pki/kubernetes/kube-apiserver-haproxy-cert.pem"
    - "/vagrant/arquivos/pki/kubernetes/kube-apiserver-haproxy-chave.pem"
    - "/vagrant/arquivos/pki/kubernetes/ca-kubernetes-cert.pem"
  tags: ["haproxy", "certificados", "verificacao"]

- name: Verificar existência dos certificados do Etcd
  ansible.builtin.stat:
    path: "{{ item }}"
  register: etcd_cert_files
  loop:
    - "/vagrant/arquivos/pki/etcd/etcd-haproxy-cliente-cert.pem"
    - "/vagrant/arquivos/pki/etcd/etcd-haproxy-cliente-chave.pem"
    - "/vagrant/arquivos/pki/etcd/ca-etcd-cert.pem"
  tags: ["haproxy", "certificados", "verificacao"]

- name: Validar existência de todos os certificados do Kubernetes
  ansible.builtin.assert:
    that: item.stat.exists
    fail_msg: "Certificado não encontrado: {{ item.item }}"
    success_msg: "Certificado encontrado: {{ item.item }}"
  loop: "{{ k8s_cert_files.results }}"
  tags: ["haproxy", "certificados", "verificacao"]

- name: Validar existência de todos os certificados do Etcd 
  ansible.builtin.assert:
    that: item.stat.exists
    fail_msg: "Certificado não encontrado: {{ item.item }}"
    success_msg: "Certificado encontrado: {{ item.item }}"
  loop: "{{ etcd_cert_files.results }}"
  tags: ["haproxy", "certificados", "verificacao"]

# Criar diretório de certificados
- name: Garantir que o diretório de certificados do HAProxy exista
  ansible.builtin.file:
    path: /etc/haproxy/certs
    state: directory
    mode: '0750'
    owner: haproxy
    group: haproxy
  tags: ["haproxy", "certificados", "diretorios"]

# Criar bundles
- name: Criar bundle para Kubernetes API Server
  ansible.builtin.assemble:
    src: "/vagrant/arquivos/pki/kubernetes"
    dest: "/etc/haproxy/certs/k8s-server-bundle.pem"
    regexp: '^kube-apiserver-haproxy-(cert|chave)\.pem$'
    mode: "0640"
    owner: "haproxy"
    group: "haproxy"
    remote_src: true
  tags: ["haproxy", "certificados", "bundle_k8s"]

- name: Criar bundle para cliente Etcd
  ansible.builtin.assemble:
    src: "/vagrant/arquivos/pki/etcd"
    dest: "/etc/haproxy/certs/etcd-client-bundle.pem"
    regexp: '^etcd-haproxy-cliente-(cert|chave)\.pem$'
    mode: "0640"
    owner: "haproxy"
    group: "haproxy"
    remote_src: true
  tags: ["haproxy", "certificados", "bundle_etcd"]

# Copiar CAs
- name: Copiar CA do Kubernetes
  ansible.builtin.copy:
    src: "/vagrant/arquivos/pki/kubernetes/ca-kubernetes-cert.pem"
    dest: "/etc/haproxy/certs/k8s-ca.pem"
    mode: "0640"
    owner: "haproxy"
    group: "haproxy"
    remote_src: true
  tags: ["haproxy", "certificados", "ca_k8s"]

- name: Copiar CA do Etcd
  ansible.builtin.copy:
    src: "/vagrant/arquivos/pki/etcd/ca-etcd-cert.pem"
    dest: "/etc/haproxy/certs/etcd-ca.pem"
    mode: "0640"
    owner: "haproxy"
    group: "haproxy"
    remote_src: true
  tags: ["haproxy", "certificados", "ca_etcd"]

# Verificações finais
- name: Verificar bundle do Kubernetes
  ansible.builtin.command:
    cmd: "openssl x509 -in /etc/haproxy/certs/k8s-server-bundle.pem -noout -text"
  register: k8s_verify
  changed_when: false
  failed_when: k8s_verify.rc != 0
  tags: ["haproxy", "certificados", "verificacao"]

- name: Verificar bundle do Etcd
  ansible.builtin.command:
    cmd: "openssl x509 -in /etc/haproxy/certs/etcd-client-bundle.pem -noout -text"
  register: etcd_verify
  changed_when: false
  failed_when: etcd_verify.rc != 0
  tags: ["haproxy", "certificados", "verificacao"]