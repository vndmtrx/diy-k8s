# ansible/ca-certs/tasks/4-etcd-ca.yml
---
- name: Verifica se os arquivos do Etcd CA já existem
  ansible.builtin.stat:
    path: "{{ item }}"
  register: etcd_file_stats
  loop:
    - /vagrant/arquivos/etcd-ca.key
    - /vagrant/arquivos/etcd-ca.crt

- name: Gera um arquivo temporário para o CSR do Etcd CA
  ansible.builtin.tempfile:
    state: file
    prefix: k8s_etcd
    suffix: csr
  register: temp_file
  when: not etcd_file_stats.results[0].stat.exists or not etcd_file_stats.results[1].stat.exists

- name: Gera a chave privada do Etcd CA
  community.crypto.openssl_privatekey:
    path: /vagrant/arquivos/etcd-ca.key
    type: "{{ tipo_chave_privada_k8s }}"
    state: present
  when: not etcd_file_stats.results[0].stat.exists

- name: Gera um CSR para o Etcd CA com as infos necessárias
  community.crypto.openssl_csr:
    basicConstraints_critical: true
    basic_constraints:
      - CA:TRUE
    common_name: etcd-ca.k8s-in-a-jar
    organization_name: Kubernetes in a Jar
    organizational_unit_name: Etcd CA
    key_usage:
      - keyCertSign
      - cRLSign
    keyUsage_critical: true
    subject_alt_name:
      - DNS:etcd.k8s.local
    extended_key_usage:
      - serverAuth
      - clientAuth
    extended_key_usage_critical: true
    subject:
      description: "CA específico para Comunicação segura do Etcd - Apenas para Fins Educacionais"
    path: "{{ temp_file.path }}"
    privatekey_path: /vagrant/arquivos/etcd-ca.key
    state: present
  when: not etcd_file_stats.results[0].stat.exists or not etcd_file_stats.results[1].stat.exists

- name: Gera o certificado do Etcd CA
  community.crypto.x509_certificate:
    path: /vagrant/arquivos/etcd-ca.crt
    privatekey_path: /vagrant/arquivos/etcd-ca.key
    csr_path: "{{ temp_file.path }}"
    provider: selfsigned
    state: present
    selfsigned_not_before: "-1h"
    selfsigned_not_after: "+365d"
  when: not etcd_file_stats.results[1].stat.exists